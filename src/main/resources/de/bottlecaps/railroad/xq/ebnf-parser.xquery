xquery version "1.0" encoding "UTF-8";

(: This file was generated on Thu Jan 30, 2025 13:30 (UTC+01) by REx v6.1 which is Copyright (c) 1979-2025 by Gunther Rademacher <grd@gmx.net> :)
(: REx command line: -xquery -tree -name de/bottlecaps/railroad/xq/ebnf-parser.xquery ..\..\..\..\..\java\de\bottlecaps\railroad\core\Parser.ebnf :)

(:~
 : The parser that was generated for the de/bottlecaps/railroad/xq/ebnf-parser.xquery grammar.
 :)
module namespace p="de/bottlecaps/railroad/xq/ebnf-parser.xquery";
declare default function namespace "http://www.w3.org/2005/xpath-functions";

(:~
 : The index of the lexer state for accessing the combined
 : (i.e. level > 1) lookahead code.
 :)
declare variable $p:lk as xs:integer := 1;

(:~
 : The index of the lexer state for accessing the position in the
 : input string of the begin of the token that has been consumed.
 :)
declare variable $p:b0 as xs:integer := 2;

(:~
 : The index of the lexer state for accessing the position in the
 : input string of the end of the token that has been consumed.
 :)
declare variable $p:e0 as xs:integer := 3;

(:~
 : The index of the lexer state for accessing the code of the
 : level-1-lookahead token.
 :)
declare variable $p:l1 as xs:integer := 4;

(:~
 : The index of the lexer state for accessing the position in the
 : input string of the begin of the level-1-lookahead token.
 :)
declare variable $p:b1 as xs:integer := 5;

(:~
 : The index of the lexer state for accessing the position in the
 : input string of the end of the level-1-lookahead token.
 :)
declare variable $p:e1 as xs:integer := 6;

(:~
 : The index of the lexer state for accessing the code of the
 : level-2-lookahead token.
 :)
declare variable $p:l2 as xs:integer := 7;

(:~
 : The index of the lexer state for accessing the position in the
 : input string of the begin of the level-2-lookahead token.
 :)
declare variable $p:b2 as xs:integer := 8;

(:~
 : The index of the lexer state for accessing the position in the
 : input string of the end of the level-2-lookahead token.
 :)
declare variable $p:e2 as xs:integer := 9;

(:~
 : The index of the lexer state for accessing the code of the
 : level-3-lookahead token.
 :)
declare variable $p:l3 as xs:integer := 10;

(:~
 : The index of the lexer state for accessing the position in the
 : input string of the begin of the level-3-lookahead token.
 :)
declare variable $p:b3 as xs:integer := 11;

(:~
 : The index of the lexer state for accessing the position in the
 : input string of the end of the level-3-lookahead token.
 :)
declare variable $p:e3 as xs:integer := 12;

(:~
 : The index of the lexer state for accessing the token code that
 : was expected when an error was found.
 :)
declare variable $p:error as xs:integer := 13;

(:~
 : The index of the lexer state that points to the first entry
 : used for collecting action results.
 :)
declare variable $p:result as xs:integer := 14;

(:~
 : The codepoint to charclass mapping for 7 bit codepoints.
 :)
declare variable $p:MAP0 as xs:integer+ :=
(
  52, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 5, 6, 7, 4, 8,
  9, 10, 11, 12, 13, 4, 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 4, 19, 20, 21, 22, 4, 23, 23, 24, 23,
  25, 23, 26, 26, 26, 26, 27, 26, 26, 28, 29, 26, 26, 30, 31, 32, 26, 26, 26, 26, 26, 26, 33, 34, 35, 36, 26, 4, 23, 23,
  37, 38, 39, 40, 26, 26, 41, 26, 26, 42, 26, 43, 44, 45, 26, 26, 46, 47, 26, 26, 48, 49, 26, 26, 4, 50, 4, 4, 4
);

(:~
 : The codepoint to charclass mapping for codepoints below the surrogate block.
 :)
declare variable $p:MAP1 as xs:integer+ :=
(
  216, 291, 323, 383, 415, 908, 351, 815, 815, 447, 479, 511, 543, 575, 621, 882, 589, 681, 815, 815, 815, 815, 815,
  815, 815, 815, 815, 815, 815, 815, 713, 745, 821, 649, 815, 815, 815, 815, 815, 815, 815, 815, 815, 815, 815, 815,
  815, 815, 777, 809, 815, 815, 815, 815, 815, 815, 815, 815, 815, 815, 815, 815, 815, 815, 815, 815, 815, 815, 815,
  815, 815, 815, 815, 815, 815, 815, 815, 815, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247,
  247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247,
  247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247,
  247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 259, 815,
  815, 815, 815, 815, 815, 815, 815, 815, 815, 815, 815, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247,
  247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247,
  247, 247, 247, 247, 247, 247, 247, 247, 853, 940, 949, 941, 941, 957, 965, 973, 979, 987, 1010, 1018, 1035, 1053,
  1071, 1079, 1087, 1262, 1262, 1262, 1262, 1262, 1262, 1433, 1262, 1254, 1254, 1255, 1254, 1254, 1254, 1255, 1254,
  1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
  1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1256, 1262, 1262, 1262, 1262, 1262, 1262,
  1262, 1262, 1262, 1262, 1262, 1254, 1254, 1254, 1254, 1254, 1254, 1342, 1255, 1253, 1252, 1254, 1254, 1254, 1254,
  1254, 1255, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1258, 1418, 1254, 1254, 1254, 1254, 1062, 1421, 1254,
  1254, 1254, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
  1254, 1261, 1262, 1420, 1260, 1262, 1388, 1262, 1262, 1262, 1262, 1262, 1253, 1254, 1254, 1259, 1131, 1308, 1387,
  1262, 1382, 1388, 1131, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1344, 1254, 1255, 1142, 1382, 1297, 1196,
  1382, 1388, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1384, 1262, 1262, 1262, 1388, 1262, 1262, 1262, 1367,
  1231, 1254, 1254, 1251, 1254, 1254, 1254, 1254, 1255, 1255, 1407, 1252, 1254, 1258, 1262, 1253, 1100, 1254, 1254,
  1254, 1254, 1254, 1254, 1254, 1254, 1253, 1100, 1254, 1254, 1254, 1254, 1109, 1262, 1254, 1254, 1254, 1254, 1254,
  1254, 1122, 1042, 1254, 1254, 1254, 1123, 1256, 1260, 1446, 1254, 1254, 1254, 1254, 1254, 1254, 1160, 1382, 1384,
  1197, 1254, 1178, 1382, 1262, 1262, 1446, 1122, 1343, 1254, 1254, 1252, 1060, 1192, 1169, 1181, 1433, 1207, 1178,
  1382, 1260, 1262, 1218, 1241, 1343, 1254, 1254, 1252, 1397, 1192, 1184, 1181, 1262, 1229, 1434, 1382, 1239, 1262,
  1446, 1230, 1251, 1254, 1254, 1252, 1249, 1160, 1272, 1114, 1262, 1262, 994, 1382, 1262, 1262, 1446, 1122, 1343, 1254,
  1254, 1252, 1340, 1160, 1198, 1181, 1434, 1207, 1045, 1382, 1262, 1262, 1002, 1023, 1285, 1281, 1063, 1023, 1133,
  1045, 1199, 1196, 1433, 1262, 1433, 1382, 1262, 1262, 1446, 1100, 1252, 1254, 1254, 1252, 1101, 1045, 1273, 1196,
  1435, 1262, 1045, 1382, 1262, 1262, 1002, 1100, 1252, 1254, 1254, 1252, 1101, 1045, 1273, 1196, 1435, 1264, 1045,
  1382, 1262, 1262, 1002, 1100, 1252, 1254, 1254, 1252, 1254, 1045, 1170, 1196, 1433, 1262, 1045, 1382, 1262, 1262,
  1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1254,
  1254, 1254, 1254, 1256, 1262, 1254, 1254, 1254, 1254, 1255, 1262, 1253, 1254, 1254, 1254, 1254, 1255, 1293, 1387,
  1305, 1383, 1382, 1388, 1262, 1262, 1262, 1262, 1210, 1317, 1419, 1253, 1327, 1337, 1293, 1152, 1352, 1384, 1382,
  1388, 1262, 1262, 1262, 1262, 1264, 1027, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1259, 1262,
  1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1249, 1396, 1259, 1262, 1262,
  1262, 1262, 1405, 1261, 1405, 1062, 1416, 1329, 1061, 1209, 1262, 1262, 1262, 1262, 1264, 1262, 1319, 1263, 1283,
  1259, 1262, 1262, 1262, 1262, 1429, 1261, 1431, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
  1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1258, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
  1254, 1260, 1254, 1254, 1256, 1256, 1254, 1254, 1254, 1254, 1256, 1256, 1254, 1408, 1254, 1254, 1254, 1256, 1254,
  1254, 1254, 1254, 1254, 1254, 1100, 1134, 1221, 1257, 1123, 1258, 1254, 1257, 1221, 1257, 1092, 1262, 1262, 1262,
  1253, 1309, 1168, 1262, 1253, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1257, 999, 1253, 1254, 1254, 1254,
  1254, 1254, 1254, 1254, 1254, 1254, 1254, 1443, 1418, 1254, 1254, 1254, 1254, 1257, 1262, 1262, 1262, 1262, 1262,
  1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
  1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1382, 1385, 1365, 1262, 1262, 1262, 1254, 1254, 1254, 1254, 1254,
  1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1258, 1262, 1262, 1262,
  1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1388, 1382, 1388, 1375, 1357, 1254, 1253, 1254, 1254, 1254, 1260,
  1381, 1382, 1273, 1386, 1272, 1381, 1382, 1384, 1381, 1365, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1253,
  1254, 1254, 1254, 1255, 1431, 1253, 1254, 1254, 1254, 1255, 1262, 1381, 1382, 1166, 1382, 1382, 1148, 1362, 1262,
  1254, 1254, 1254, 1259, 1259, 1262, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 1, 0, 0, 3, 4, 5, 6, 7, 4, 8, 9, 10,
  11, 12, 13, 4, 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 18, 4, 19, 20, 21, 22, 4, 23, 23, 24, 23, 25, 23, 26, 4, 4,
  4, 4, 4, 51, 51, 4, 4, 51, 51, 4, 26, 26, 26, 26, 26, 26, 27, 26, 26, 28, 29, 26, 26, 30, 31, 32, 26, 26, 26, 4, 4, 4,
  26, 26, 4, 4, 26, 4, 26, 26, 26, 33, 34, 35, 36, 26, 4, 4, 26, 26, 4, 4, 4, 4, 51, 51, 4, 23, 23, 37, 38, 39, 40, 26,
  4, 26, 4, 4, 4, 26, 26, 4, 4, 4, 26, 41, 26, 26, 42, 26, 43, 44, 45, 26, 26, 46, 47, 26, 26, 48, 49, 26, 26, 4, 50, 4,
  4, 4, 4, 4, 51, 4, 26, 26, 26, 26, 26, 26, 4, 26, 26, 26, 26, 26, 4, 51, 51, 51, 51, 4, 51, 51, 51, 4, 4, 26, 26, 26,
  26, 26, 4, 4, 26, 26, 51, 26, 26, 26, 26, 26, 26, 26, 4, 26, 4, 26, 26, 26, 26, 4, 26, 51, 51, 4, 51, 51, 51, 4, 51,
  51, 26, 4, 4, 26, 26, 4, 4, 51, 26, 51, 51, 4, 51, 51, 51, 51, 51, 4, 4, 51, 51, 26, 26, 51, 51, 4, 4, 51, 51, 51, 4,
  4, 4, 4, 51, 26, 26, 4, 4, 51, 4, 51, 51, 51, 51, 4, 4, 4, 51, 51, 4, 4, 4, 4, 26, 26, 4, 26, 4, 4, 26, 4, 4, 51, 4,
  4, 26, 26, 26, 4, 26, 26, 4, 26, 26, 26, 26, 4, 26, 4, 26, 26, 51, 51, 26, 26, 26, 4, 4, 4, 4, 26, 26, 4, 26, 26, 4,
  26, 26, 26, 26, 26, 26, 26, 26, 4, 4, 4, 4, 4, 4, 4, 4, 26, 4, 51, 51, 51, 51, 51, 51, 4, 51, 51, 4, 26, 26, 4, 26, 4,
  26, 26, 26, 26, 4, 4, 26, 51, 26, 26, 51, 51, 51, 51, 51, 26, 26, 51, 26, 26, 26, 26, 26, 26, 51, 51, 51, 51, 51, 51,
  26, 4, 26, 4, 4, 26, 4, 4, 26, 26, 4, 26, 26, 26, 4, 26, 4, 26, 4, 26, 4, 4, 26, 26, 4, 26, 26, 4, 4, 26, 26, 26, 26,
  26, 4, 26, 26, 26, 26, 26, 4, 51, 4, 4, 4, 4, 51, 51, 4, 51, 4, 4, 4, 4, 4, 4, 26, 51, 4, 4, 4, 4, 4, 51, 4, 51, 51,
  51, 51, 51, 51, 51, 51, 4, 4, 4, 4, 4, 4, 4, 26, 4, 26, 26, 4, 26, 26, 4, 4, 4, 4, 4, 26, 4, 26, 4, 26, 4, 26, 4, 26,
  4, 4, 4, 4, 4, 26, 26, 26, 26, 26, 26, 4, 4, 4, 26, 4, 4, 4, 4, 4, 4, 4, 51, 51, 4, 26, 26, 26, 4, 51, 51, 51, 4, 26,
  26, 26
);

(:~
 : The codepoint to charclass mapping for codepoints above the surrogate block.
 :)
declare variable $p:MAP2 as xs:integer+ :=
(
  57344, 65536, 65533, 1114111, 4, 4
);

(:~
 : The token-set-id to DFA-initial-state mapping.
 :)
declare variable $p:INITIAL as xs:integer+ :=
(
  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,
  33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50
);

(:~
 : The DFA transition table.
 :)
declare variable $p:TRANSITION as xs:integer+ :=
(
  3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067,
  3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 1696, 1714, 1701, 1716, 1716, 1716,
  1724, 3063, 1730, 2562, 1957, 1790, 1742, 1764, 1759, 2017, 2531, 2063, 2465, 2467, 2515, 2978, 3067, 3067, 3067,
  3067, 3067, 3067, 3067, 3067, 3067, 3067, 1696, 1714, 1701, 1716, 1716, 1716, 1724, 3063, 1730, 2562, 1927, 1790,
  1742, 1764, 1759, 2017, 2682, 2403, 2465, 2467, 2515, 2978, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067,
  3067, 1696, 1714, 1706, 1716, 1716, 1716, 1724, 3095, 3101, 2724, 1975, 1790, 1742, 1772, 1759, 2017, 2531, 2063,
  2465, 2467, 2515, 2978, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 1749, 3066, 2827, 3067, 3067,
  3067, 1747, 3095, 3101, 2724, 1975, 3068, 1742, 1780, 1788, 2017, 2460, 2063, 2465, 2467, 2515, 2516, 3067, 3067,
  3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 1749, 1798, 3081, 1810, 1810, 1810, 1816, 2024, 3101, 2724, 1975,
  3068, 1742, 1780, 1788, 2017, 2460, 2063, 2465, 2467, 2515, 2516, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067,
  3067, 3067, 3067, 3066, 1917, 2538, 2689, 2693, 2544, 3095, 2909, 2645, 1975, 3068, 1922, 1826, 1840, 2002, 2660,
  2063, 2847, 2467, 2515, 2516, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 1749, 3066, 2827, 3253,
  1851, 1855, 3259, 3095, 3101, 2724, 1975, 3068, 1742, 1780, 1788, 2017, 2460, 2063, 2465, 2467, 2515, 2516, 3067,
  3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 1749, 3066, 2827, 3067, 3327, 3330, 1863, 3095, 3101, 2724,
  1975, 3068, 1742, 1780, 1788, 2017, 2460, 2063, 2465, 2467, 2515, 2516, 3067, 3067, 3067, 3067, 3067, 3067, 3067,
  3067, 3067, 3067, 1749, 1875, 3145, 1887, 1887, 1887, 1893, 2903, 3101, 2724, 1975, 3068, 1742, 1780, 1788, 2017,
  2460, 2063, 2465, 2467, 2515, 2516, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 1749, 3066, 2827,
  1906, 1935, 1939, 1912, 3095, 3101, 2724, 1975, 3068, 1742, 1780, 1788, 2017, 2460, 2063, 2465, 2467, 2515, 2516,
  3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 1749, 1947, 1970, 2634, 1965, 1983, 1952, 3095, 3101,
  2724, 1975, 3068, 1742, 1780, 1788, 2017, 2460, 2063, 2465, 2467, 2515, 2516, 3067, 3067, 3067, 3067, 3067, 3067,
  3067, 3067, 3067, 3067, 1749, 3066, 2827, 3067, 3067, 1991, 1998, 3095, 2010, 2097, 2125, 1751, 2038, 2051, 2059,
  2258, 3174, 2585, 3179, 3181, 2071, 2077, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 1749, 3066,
  2827, 3067, 3067, 2085, 2092, 3095, 3101, 2724, 2105, 3068, 1742, 1780, 1788, 2017, 2460, 2063, 2465, 2467, 2515,
  2516, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 1749, 3066, 2827, 3067, 3067, 2113, 2120, 3095,
  2154, 2724, 1975, 2187, 2133, 1780, 1788, 2147, 2460, 2063, 2510, 2667, 2515, 2516, 3067, 3067, 3067, 3067, 3067,
  3067, 3067, 3067, 3067, 3067, 1749, 3066, 2827, 2176, 2195, 2199, 2182, 3095, 3101, 2724, 1975, 2748, 1742, 1780,
  1788, 2017, 2460, 2063, 2510, 2667, 2515, 2516, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 1734,
  2207, 2214, 2219, 2234, 2227, 2240, 3095, 2251, 2243, 2168, 3068, 2317, 2273, 2281, 2161, 2460, 2737, 2465, 2467,
  2515, 2612, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 1749, 3066, 2827, 3067, 3067, 3067, 3220,
  3095, 2361, 2724, 1975, 2294, 2289, 2302, 1788, 2310, 2460, 2330, 2930, 2788, 2515, 2516, 3067, 3067, 3067, 3067,
  3067, 3067, 3067, 3067, 3067, 3067, 2346, 2344, 2875, 3067, 2359, 2354, 2369, 3095, 3101, 1843, 1975, 3068, 2377,
  2390, 1788, 2890, 2460, 2063, 2465, 2467, 2515, 2516, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067,
  1749, 2398, 2411, 2419, 2427, 2432, 2440, 3115, 3101, 2453, 3121, 3068, 1742, 1780, 1788, 2017, 2460, 2063, 2465,
  2467, 2515, 2516, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3261, 3066, 2827, 3067, 3067, 3067,
  1747, 2476, 3101, 2724, 2043, 3068, 1742, 2490, 2498, 2524, 2763, 2445, 2465, 2467, 2515, 2516, 3067, 3067, 3067,
  3067, 3067, 3067, 3067, 3067, 3067, 3067, 1749, 3066, 2554, 2570, 2560, 2832, 2580, 2715, 2593, 2724, 1975, 3068,
  1742, 1780, 1788, 2017, 2460, 2063, 2465, 2849, 2608, 2516, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067,
  3067, 2721, 2620, 3049, 3067, 2632, 2624, 2642, 2653, 2139, 2675, 2701, 3068, 1922, 1832, 1788, 3230, 2460, 2063,
  2465, 2709, 2515, 2516, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 2732, 2745, 2756, 2778, 2778,
  2778, 2783, 3095, 2572, 2724, 1975, 2294, 2289, 2302, 1788, 2310, 2505, 2330, 2930, 2796, 2515, 2516, 3067, 3067,
  3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 2732, 2745, 2756, 2778, 2778, 2778, 2783, 3095, 2572, 2724, 1975,
  2294, 2289, 2302, 2822, 2310, 2505, 2330, 2930, 2796, 2515, 2516, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067,
  3067, 3067, 2732, 2745, 2756, 2778, 2778, 2778, 2783, 3095, 2572, 2724, 1975, 2840, 2289, 2302, 1788, 2310, 2857,
  2330, 2972, 2796, 2515, 2516, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 2732, 2745, 2756, 2778,
  2778, 2778, 2783, 3095, 2030, 2724, 1975, 2748, 1742, 1780, 1788, 2017, 2505, 2063, 2510, 2802, 2515, 2516, 3067,
  3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 2732, 2745, 2756, 2778, 2778, 2778, 2783, 3095, 2030, 2724,
  1975, 2748, 1742, 1780, 2870, 2017, 2505, 2063, 2510, 2802, 2515, 2516, 3067, 3067, 3067, 3067, 3067, 3067, 3067,
  3067, 3067, 3067, 2732, 2745, 2756, 2778, 2778, 2778, 2783, 3095, 2030, 2724, 1975, 2748, 2883, 1780, 1788, 2017,
  2505, 3160, 2510, 2802, 2515, 2516, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 2732, 2745, 2756,
  2778, 2778, 2778, 2783, 3095, 2030, 2724, 1975, 2748, 2917, 1780, 1788, 2017, 2925, 2063, 2510, 2802, 2515, 2516,
  3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 2732, 2745, 2756, 2778, 2778, 2778, 2783, 3095, 2030,
  2724, 1975, 2748, 1742, 1780, 1788, 2017, 2505, 2938, 2510, 2802, 2515, 2516, 3067, 3067, 3067, 3067, 3067, 3067,
  3067, 3067, 3067, 3067, 2732, 2745, 2756, 2778, 2778, 2778, 2783, 3095, 2030, 2724, 1975, 2748, 1742, 1780, 1788,
  2017, 2505, 2063, 2952, 2802, 2515, 2516, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 2732, 2745,
  2756, 2778, 2778, 2778, 2783, 3095, 2030, 2724, 1975, 2965, 1742, 1780, 1788, 2017, 2505, 2063, 2510, 2802, 2515,
  2516, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 1749, 2986, 3301, 2999, 3007, 3014, 3020, 3095,
  3101, 2724, 1975, 3068, 1742, 1780, 1788, 2017, 2460, 2063, 2465, 2467, 2515, 2516, 3067, 3067, 3067, 3067, 3067,
  3067, 3067, 3067, 3067, 3067, 1818, 3066, 2991, 3067, 3033, 2546, 3044, 3057, 3101, 2724, 1975, 3068, 1742, 1780,
  1788, 2017, 2460, 2063, 2465, 2467, 2515, 2516, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 1898,
  3066, 1897, 3067, 3067, 3067, 3067, 3095, 1730, 3067, 1957, 3225, 3076, 2468, 3089, 3109, 2897, 2063, 2665, 2322,
  2515, 2516, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 1749, 3066, 3025, 3129, 3129, 1867, 3140,
  3095, 3101, 3153, 1975, 3068, 1742, 1780, 1788, 2017, 2460, 2063, 2465, 2467, 2515, 2516, 3067, 3067, 3067, 3067,
  3067, 3067, 3067, 3067, 3067, 3067, 2732, 2745, 2756, 2778, 2778, 2778, 2783, 3095, 2572, 2724, 1975, 2294, 2289,
  2302, 1788, 2310, 2505, 2330, 2930, 2796, 3274, 2516, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067,
  2732, 2745, 2756, 2778, 2778, 2778, 2783, 3095, 2572, 2724, 1975, 2294, 2289, 2302, 1788, 2310, 2770, 2330, 2930,
  2796, 2515, 2516, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 2732, 2745, 2756, 2778, 2778, 2778,
  2783, 3095, 2572, 2724, 1975, 2294, 2289, 2302, 1788, 2310, 2600, 3189, 2930, 2796, 2515, 2516, 3067, 3067, 3067,
  3067, 3067, 3067, 3067, 3067, 3067, 3067, 2732, 2745, 2756, 2778, 2778, 2778, 2783, 3095, 2572, 2724, 1975, 2294,
  2289, 2302, 1788, 2310, 2505, 2330, 2945, 2796, 2515, 2516, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067,
  3067, 2732, 2745, 2756, 2778, 2778, 2778, 2783, 3095, 2030, 2724, 1975, 2748, 1742, 1780, 1788, 2017, 2505, 2063,
  2510, 2814, 2336, 2516, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 2732, 2745, 2756, 2778, 2778,
  2778, 2783, 3095, 2030, 2724, 1975, 2748, 1742, 1780, 1788, 2017, 2505, 2063, 2510, 2808, 2515, 2516, 3067, 3067,
  3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 2732, 2745, 2756, 2778, 2778, 2778, 2783, 3095, 2030, 2724, 1975,
  2748, 1742, 1780, 1788, 2017, 2505, 2063, 2510, 2802, 3197, 3279, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067,
  3067, 3067, 2732, 2745, 2756, 2778, 2778, 2778, 2783, 3095, 2030, 2724, 1975, 2748, 1742, 1780, 1788, 2017, 2505,
  2063, 2510, 2802, 2515, 3167, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 2732, 2745, 2756, 2778,
  2778, 2778, 2783, 3095, 2030, 2724, 1975, 2748, 1742, 1780, 1788, 2017, 2505, 2063, 2862, 2802, 2515, 2516, 3067,
  3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 2732, 2745, 2756, 2778, 2778, 2778, 2783, 3095, 2030, 2724,
  1975, 2748, 1742, 3205, 1788, 2017, 2505, 2063, 2510, 2802, 2515, 2516, 3067, 3067, 3067, 3067, 3067, 3067, 3067,
  3067, 3067, 3067, 2732, 2745, 2756, 2778, 2778, 2778, 2783, 3095, 2030, 2724, 1975, 2748, 1742, 1780, 1788, 2017,
  2505, 2063, 2510, 2802, 2957, 3213, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 2732, 2745, 2756,
  2778, 2778, 2778, 2783, 3095, 2030, 2724, 1975, 3036, 1742, 3238, 1788, 2017, 2505, 2063, 2510, 2802, 2515, 2516,
  3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 2732, 2745, 2756, 2778, 2778, 2778, 2783, 3095, 2482,
  3246, 1975, 1802, 1742, 1780, 1788, 2265, 2505, 2382, 3269, 2802, 2515, 2516, 3067, 3067, 3067, 3067, 3067, 3067,
  3067, 3067, 3067, 3067, 1749, 3287, 3296, 3288, 3309, 3314, 3322, 3095, 3101, 2724, 1975, 3068, 1742, 1780, 1788,
  2017, 2460, 2063, 2465, 2467, 2515, 2516, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 1749, 3066,
  2827, 3067, 3067, 3067, 3220, 3095, 3101, 2724, 1975, 2748, 1742, 1780, 1788, 2017, 2460, 2063, 2510, 2667, 2515,
  2516, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 1879, 3132, 3338, 3350, 3353, 3342, 3067,
  3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067, 3067,
  3067, 3067, 3067, 3067, 3067, 0, 52, 0, 0, 566, 566, 566, 566, 0, 0, 566, 566, 566, 2115, 2115, 566, 566, 566, 3899,
  3840, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 0, 52, 0, 566, 0, 0, 0, 34816, 0, 0, 0, 0, 55, 55, 55, 55, 97,
  97, 0, 84, 113, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 101, 113, 113, 0, 0, 0, 0, 119, 0, 108, 84, 0, 97, 3199, 118, 119,
  0, 108, 84, 0, 125, 3199, 118, 0, 0, 84, 84, 0, 125, 3199, 113, 113, 0, 0, 0, 0, 0, 0, 0, 108, 59, 0, 61, 61, 0, 0, 0,
  0, 107, 1374, 0, 84, 61, 61, 61, 61, 61, 61, 61, 61, 0, 52, 0, 0, 0, 0, 0, 58, 118, 0, 0, 84, 84, 0, 118, 0, 0, 84,
  84, 0, 118, 3199, 113, 113, 128, 0, 0, 0, 0, 0, 92, 92, 0, 0, 0, 4864, 0, 4864, 4864, 4864, 4864, 4864, 4864, 4864,
  4864, 5120, 5120, 0, 52, 0, 0, 0, 0, 1352, 0, 1352, 0, 59, 0, 62, 62, 0, 0, 0, 0, 4352, 0, 0, 0, 62, 62, 62, 62, 62,
  62, 62, 62, 0, 52, 0, 0, 0, 0, 10752, 0, 0, 0, 0, 0, 0, 5376, 0, 0, 0, 5376, 5376, 0, 52, 0, 0, 0, 0, 68, 68, 0, 0, 0,
  84, 113, 0, 0, 0, 84, 512, 0, 84, 0, 0, 0, 5376, 0, 5376, 5376, 5376, 5376, 5376, 5376, 5376, 5376, 59, 0, 0, 0, 0,
  5632, 5632, 0, 52, 0, 0, 0, 0, 84, 597, 0, 84, 0, 0, 0, 5632, 0, 0, 0, 0, 5632, 2115, 2115, 0, 0, 0, 84, 597, 0, 84,
  2304, 5632, 5632, 5632, 5632, 5632, 5632, 5632, 5632, 0, 80, 80, 5888, 5888, 5968, 5888, 5968, 5968, 0, 52, 0, 0, 84,
  0, 0, 0, 136, 0, 0, 87, 0, 34816, 0, 0, 92, 0, 0, 84, 0, 97, 0, 3199, 0, 0, 59, 59, 1536, 62, 0, 0, 0, 34816, 0, 0,
  92, 1374, 97, 97, 0, 100, 114, 0, 0, 0, 84, 597, 7680, 84, 2304, 118, 0, 0, 100, 100, 0, 125, 3199, 114, 114, 0, 0, 0,
  0, 0, 131, 0, 132, 0, 84, 0, 100, 100, 100, 100, 100, 100, 100, 173, 100, 100, 175, 100, 0, 0, 81, 81, 6400, 6400,
  6481, 6400, 6481, 6481, 0, 52, 0, 0, 0, 0, 96, 0, 92, 98, 6144, 6656, 0, 0, 84, 597, 0, 84, 2304, 0, 6912, 6912, 0, 0,
  6912, 0, 6912, 6912, 1075, 52, 0, 0, 0, 0, 100, 597, 0, 101, 2304, 97, 111, 0, 84, 113, 115, 0, 0, 0, 34816, 90, 91,
  92, 0, 0, 133, 84, 0, 97, 0, 3199, 0, 0, 88, 34904, 0, 0, 92, 0, 0, 84, 135, 0, 124, 3199, 0, 0, 99, 84, 597, 0, 84,
  2304, 0, 0, 7168, 0, 0, 0, 7168, 7168, 1075, 52, 0, 0, 0, 0, 105, 105, 1374, 0, 84, 0, 0, 7168, 0, 7168, 7168, 7168,
  7168, 7168, 7168, 7168, 7168, 59, 0, 55, 55, 55, 7479, 55, 55, 66, 7479, 2115, 2115, 66, 66, 55, 76, 7500, 76, 7479,
  55, 7500, 7500, 7500, 7500, 7500, 7500, 7500, 7500, 66, 7479, 7500, 7500, 76, 7500, 7500, 0, 0, 0, 0, 597, 0, 92, 92,
  0, 0, 597, 0, 34816, 0, 0, 92, 0, 0, 100, 0, 97, 0, 3199, 0, 0, 84, 0, 97, 0, 3199, 137, 118, 120, 0, 84, 84, 124,
  118, 3199, 113, 4096, 0, 0, 0, 0, 0, 132, 97, 97, 0, 84, 113, 1894, 0, 0, 0, 0, 1374, 1887, 84, 118, 0, 122, 84, 84,
  0, 125, 3199, 0, 122, 84, 0, 97, 0, 3199, 0, 0, 112, 512, 625, 0, 0, 0, 106, 84, 84, 0, 0, 2697, 0, 0, 131, 0, 132, 0,
  84, 165, 166, 84, 84, 169, 170, 59, 0, 0, 0, 0, 0, 0, 56, 0, 0, 56, 0, 56, 0, 0, 0, 56, 0, 0, 0, 0, 0, 0, 92, 0, 0,
  56, 0, 83, 0, 0, 0, 86, 110, 110, 0, 84, 113, 0, 0, 0, 131, 0, 132, 150, 84, 118, 0, 0, 84, 84, 0, 126, 3199, 59, 0,
  0, 0, 63, 0, 0, 0, 131, 0, 141, 0, 84, 64, 63, 0, 2115, 2115, 69, 70, 64, 73, 73, 63, 69, 69, 69, 63, 63, 69, 73, 63,
  69, 77, 77, 77, 77, 82, 82, 77, 82, 82, 82, 82, 0, 52, 0, 0, 0, 0, 131, 121, 21134, 0, 84, 7936, 0, 0, 0, 0, 92, 98,
  0, 0, 131, 132, 0, 84, 52114, 0, 0, 0, 0, 84, 84, 0, 0, 0, 8960, 0, 59, 59, 61, 62, 0, 0, 0, 34905, 0, 0, 92, 1374,
  118, 121, 0, 84, 84, 0, 125, 3199, 113, 113, 0, 0, 0, 0, 121, 0, 0, 131, 132, 0, 84, 52114, 3219, 0, 0, 0, 84, 84, 84,
  84, 84, 84, 84, 0, 20992, 0, 84, 0, 97, 0, 3199, 0, 0, 131, 132, 0, 134, 52114, 0, 0, 74, 0, 0, 0, 74, 74, 0, 0, 0, 0,
  0, 0, 58, 0, 65, 0, 0, 2115, 2115, 0, 0, 65, 0, 0, 0, 0, 0, 0, 97, 0, 65, 65, 0, 0, 0, 0, 0, 0, 92, 1374, 65, 65, 0,
  52, 9728, 0, 0, 0, 140, 0, 132, 0, 100, 9216, 0, 0, 34816, 0, 0, 92, 0, 0, 131, 132, 0, 145, 52114, 3219, 8704, 84,
  84, 84, 84, 84, 84, 84, 3328, 84, 3584, 0, 33596, 53, 0, 0, 0, 0, 0, 9472, 9472, 9472, 9472, 9472, 0, 9472, 0, 0, 0,
  0, 0, 0, 5632, 5632, 9472, 9472, 0, 0, 0, 0, 0, 0, 93, 93, 0, 0, 0, 33596, 33596, 61, 62, 8192, 0, 0, 131, 132, 143,
  84, 0, 0, 0, 0, 0, 84, 84, 52127, 0, 91, 0, 0, 0, 8282, 92, 92, 0, 0, 131, 141, 0, 134, 52114, 0, 0, 74, 0, 74, 74,
  74, 74, 74, 74, 74, 74, 0, 8282, 0, 84, 597, 0, 84, 2304, 0, 160, 161, 0, 84, 84, 0, 0, 59, 0, 61, 62, 0, 0, 53, 0, 0,
  0, 0, 0, 92, 98, 0, 1075, 52, 0, 0, 1075, 0, 0, 0, 141, 0, 132, 0, 84, 59, 0, 1075, 0, 0, 0, 0, 0, 1374, 0, 84, 0,
  1075, 0, 2115, 2115, 1075, 1075, 0, 0, 131, 142, 0, 84, 52114, 0, 0, 131, 132, 0, 144, 52114, 3219, 1075, 1075, 1075,
  1075, 1075, 1075, 1075, 1075, 52, 0, 0, 0, 0, 156, 84, 84, 52127, 0, 52127, 0, 0, 156, 84, 84, 52127, 0, 0, 0, 84, 84,
  52127, 0, 0, 0, 84, 163, 52127, 0, 0, 0, 162, 84, 52127, 0, 113, 113, 0, 129, 0, 0, 0, 0, 2115, 2115, 0, 0, 0, 65, 65,
  0, 65, 65, 1894, 103, 103, 0, 0, 1374, 1887, 84, 153, 0, 0, 0, 0, 84, 84, 0, 8448, 0, 139, 131, 132, 0, 84, 52114,
  3219, 0, 0, 0, 84, 158, 113, 113, 0, 0, 130, 0, 0, 0, 2115, 2115, 0, 0, 56, 97, 97, 0, 84, 113, 0, 116, 0, 0, 134, 0,
  110, 0, 3199, 0, 0, 131, 132, 0, 84, 0, 0, 59, 59, 61, 1536, 0, 0, 0, 34816, 0, 0, 93, 0, 97, 97, 0, 84, 113, 0, 0,
  117, 138, 0, 131, 132, 0, 84, 52114, 3219, 0, 0, 156, 84, 84, 0, 148, 0, 131, 0, 132, 0, 84, 52114, 3219, 0, 0, 156,
  157, 84, 52114, 3219, 0, 155, 0, 84, 84, 84, 84, 168, 84, 84, 0, 104, 0, 0, 0, 1374, 0, 84, 52114, 3219, 154, 0, 156,
  84, 84, 171, 84, 84, 174, 84, 0, 59, 0, 0, 9984, 0, 0, 0, 0, 2115, 2115, 0, 0, 58, 71, 71, 10059, 71, 71, 71, 10059,
  10059, 71, 71, 10059, 71, 10062, 10062, 10063, 10062, 10062, 10062, 10062, 10062, 10062, 10062, 10062, 0, 52, 0, 0, 0,
  0, 2115, 2115, 0, 0, 1352, 0, 58, 0, 0, 0, 0, 0, 0, 1374, 0, 109, 0, 58, 0, 52, 0, 0, 0, 0, 2115, 2115, 0, 0, 9472, 0,
  10496, 59, 59, 61, 62, 0, 0, 59, 59, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 106, 0, 84, 113, 0, 0, 0, 2115, 2115, 0, 61, 0,
  113, 113, 0, 0, 0, 106, 0, 0, 59, 59, 61, 62, 0, 0, 0, 34816, 0, 0, 92, 0, 0, 106, 84, 0, 106, 106, 0, 0, 59, 59, 61,
  62, 0, 7936, 0, 84, 597, 0, 84, 2304, 0, 1352, 0, 0, 0, 0, 0, 0, 4352, 4352, 0, 1352, 1352, 0, 52, 0, 0, 0, 0, 2115,
  2115, 0, 62, 0, 0, 0, 10240, 0, 0, 10332, 10338, 0, 0, 149, 131, 0, 132, 0, 84, 172, 84, 84, 84, 84, 84, 0, 0, 140,
  132, 0, 100, 52114, 0, 0, 0, 0, 100, 100, 0, 0, 2697, 0, 0, 131, 0, 132, 0, 151, 0, 164, 84, 84, 84, 84, 84, 84, 118,
  0, 0, 84, 123, 0, 125, 3199, 171, 84, 84, 84, 84, 84, 84, 0, 0, 1075, 52, 0, 0, 0, 0, 106, 106, 0, 0, 84, 0, 0, 0,
  3199, 0, 118, 0, 0, 109, 84, 0, 125, 3199, 0, 95, 0, 0, 0, 92, 98, 0, 0, 4864, 0, 0, 0, 4864, 4864, 0, 52, 0, 0, 0, 0,
  57, 0, 152, 52114, 3219, 0, 0, 0, 84, 84, 84, 167, 84, 84, 84, 174, 84, 84, 84, 0, 59, 0, 0, 0, 0, 0, 11008, 0, 11008,
  0, 0, 11008, 2115, 2115, 0, 0, 0, 2115, 2115, 0, 71, 0, 11008, 0, 11008, 11008, 0, 11008, 11008, 11008, 11008, 11008,
  11008, 11008, 11008, 11008, 11008, 0, 52, 0, 0, 0, 0, 5120, 5120, 5120, 5120, 5120, 5120, 5120, 5120, 4352, 4352, 0,
  4352, 4352, 4352, 0, 0, 0, 0, 0, 0, 4352, 4352, 0, 4352, 4352, 4352, 4352, 4352, 4352, 4352, 4352
);

(:~
 : The DFA-state to expected-token-set mapping.
 :)
declare variable $p:EXPECTED as xs:integer+ :=
(
  133, 88, 92, 96, 100, 103, 107, 111, 115, 119, 123, 127, 131, 195, 249, 139, 146, 164, 142, 150, 154, 197, 163, 158,
  175, 162, 168, 174, 179, 183, 169, 188, 182, 170, 181, 184, 192, 201, 205, 203, 209, 211, 211, 213, 273, 220, 217,
  233, 237, 241, 244, 253, 257, 261, 263, 267, 271, 248, 222, 135, 229, 284, 280, 277, 247, 223, 283, 223, 223, 226,
  223, 223, 225, 223, 223, 224, 228, 223, 227, 223, 225, 223, 227, 225, 223, 223, 223, 223, 10, 536870914, 2, 2, 16388,
  16384, 42, 34, -2147418110, 270532610, 2097154, 536870914, 1073741826, -2147450870, 270532610, 960, 98314, 229418,
  1610612754, 1073971242, 1073971258, -2011955094, 241706, 268677162, 241706, -1741422486, -2009857942, 268677162,
  1610842170, -1741422486, 269201450, -1742753686, -2011189142, -1742752662, -1740656534, -1203785622, -1631604630,
  -1094733718, -645943190, -645943174, -1610633110, -109072262, -536891286, -536891270, -20358, 8, 2048, 0, 0, 0, 8, 32,
  32, -2147483648, 1073741824, 64, 0, 45058, 0, 32770, 256, 960, -2147483648, 131072, 132096, 8388608, 33554432,
  -1073741824, 2048, 2, 131072, 16, 64, 45058, 32770, 576, 0, 0, 131072, 16, 131072, 131072, 131072, 12290, 1024, 2048,
  12290, 1024, 132096, 2048, 2, 32768, 32768, 512, 0, 0, 131072, 131072, 131072, 8194, 132096, 132096, 2048, 512, 4098,
  1024, 2048, 0, 2, 2, 536870912, 32770, 256, 0, 131072, 8194, 4098, 1024, 0, 0, 131072, 0, 8194, 4098, 8194, 4098,
  8194, 8194, 0, 32, 0, 64, 0, 4, 256, 0, 0, 0, 0, 1, 2, 0, 0, 0, 3, 0, 1024, 16, 8, 0, 1024, 0, 512, 3, 1, 280, 9, 192,
  3, 3, 0, 0, 0, 4, 4, 1027, 192, 1216, 1027, 281, 1216, 1027, 195, 1219, 1219, 1219, 1219, 1243, 1243, 1235, 1499,
  1243, 1243, 1499, 0, 0, 32, 512, 0, 128, 128, 0, 0, 128, 0, 3, 1, 0, 0, 1
);

(:~
 : The token-string table.
 :)
declare variable $p:TOKEN as xs:string+ :=
(
  "%ERROR",
  "Whitespace",
  "ProcessingInstructionContents",
  "NCName",
  "Context",
  "StringLiteral",
  "CharCode",
  "Char",
  "CharRange",
  "CharCodeRange",
  "'['",
  "URL",
  "'/*ws:explicit*/'",
  "'/*ws:definition*/'",
  "S",
  "DocComment",
  "EOF",
  "EquivalenceLookAhead",
  "'$'",
  "'&amp;'",
  "'('",
  "')'",
  "'*'",
  "'**'",
  "'+'",
  "'++'",
  "'-'",
  "'.'",
  "'/'",
  "'::='",
  "'<<'",
  "'<?'",
  "'<?ENCORE?>'",
  "'<?TOKENS?>'",
  "'=='",
  "'>>'",
  "'?'",
  "'?>'",
  "'['",
  "'[^'",
  "'\\'",
  "']'",
  "'|'"
);

(:~
 : Match next token in input string, starting at given index, using
 : the DFA entry state for the set of tokens that are expected in
 : the current context.
 :
 : @param $input the input string.
 : @param $begin the index where to start in input string.
 : @param $token-set the expected token set id.
 : @return a sequence of three: the token code of the result token,
 : with input string begin and end positions. If there is no valid
 : token, return the negative id of the DFA state that failed, along
 : with begin and end positions of the longest viable prefix.
 :)
declare function p:match($input as xs:string,
                         $begin as xs:integer,
                         $token-set as xs:integer) as xs:integer+
{
  let $result := $p:INITIAL[1 + $token-set]
  return p:transition($input,
                      $begin,
                      $begin,
                      $begin,
                      $result,
                      $result mod 256,
                      0)
};

(:~
 : The DFA state transition function. If we are in a valid DFA state, save
 : it's result annotation, consume one input codepoint, calculate the next
 : state, and use tail recursion to do the same again. Otherwise, return
 : any valid result or a negative DFA state id in case of an error.
 :
 : @param $input the input string.
 : @param $begin the begin index of the current token in the input string.
 : @param $current the index of the current position in the input string.
 : @param $end the end index of the result in the input string.
 : @param $result the result code.
 : @param $current-state the current DFA state.
 : @param $previous-state the  previous DFA state.
 : @return a sequence of three: the token code of the result token,
 : with input string begin and end positions. If there is no valid
 : token, return the negative id of the DFA state that failed, along
 : with begin and end positions of the longest viable prefix.
 :)
declare function p:transition($input as xs:string,
                              $begin as xs:integer,
                              $current as xs:integer,
                              $end as xs:integer,
                              $result as xs:integer,
                              $current-state as xs:integer,
                              $previous-state as xs:integer)
{
  if ($current-state eq 0) then
    let $result := $result idiv 256
    let $end :=
      if ($result idiv 64 mod 2 eq 1) then
        $begin + $result idiv 128
      else
        $end - $result idiv 128
    let $end := if ($end gt string-length($input)) then string-length($input) + 1 else $end
    return
      if ($result ne 0) then
      (
        $result mod 64 - 1,
        $begin,
        $end
      )
      else
      (
        - $previous-state,
        $begin,
        $current - 1
      )
  else
    let $c0 := (string-to-codepoints(substring($input, $current, 1)), 0)[1]
    let $c1 :=
      if ($c0 < 128) then
        $p:MAP0[1 + $c0]
      else if ($c0 < 55296) then
        let $c1 := $c0 idiv 8
        let $c2 := $c1 idiv 32
        return $p:MAP1[1 + $c0 mod 8 + $p:MAP1[1 + $c1 mod 32 + $p:MAP1[1 + $c2]]]
      else
        p:map2($c0, 1, 2)
    let $current := $current + 1
    let $i0 := 256 * $c1 + $current-state - 1
    let $i1 := $i0 idiv 8
    let $next-state := $p:TRANSITION[$i0 mod 8 + $p:TRANSITION[$i1 + 1] + 1]
    return
      if ($next-state > 255) then
        p:transition($input, $begin, $current, $current, $next-state, $next-state mod 256, $current-state)
      else
        p:transition($input, $begin, $current, $end, $result, $next-state, $current-state)
};

(:~
 : Recursively translate one 32-bit chunk of an expected token bitset
 : to the corresponding sequence of token strings.
 :
 : @param $result the result of previous recursion levels.
 : @param $chunk the 32-bit chunk of the expected token bitset.
 : @param $base-token-code the token code of bit 0 in the current chunk.
 : @return the set of token strings.
 :)
declare function p:token($result as xs:string*,
                         $chunk as xs:integer,
                         $base-token-code as xs:integer)
{
  if ($chunk = 0) then
    $result
  else
    p:token
    (
      ($result, if ($chunk mod 2 != 0) then $p:TOKEN[$base-token-code] else ()),
      if ($chunk < 0) then $chunk idiv 2 + 2147483648 else $chunk idiv 2,
      $base-token-code + 1
    )
};

(:~
 : Calculate expected token set for a given DFA state as a sequence
 : of strings.
 :
 : @param $state the DFA state.
 : @return the set of token strings.
 :)
declare function p:expected-token-set($state as xs:integer) as xs:string*
{
  if ($state > 0) then
    for $t in 0 to 1
    let $i0 := $t * 175 + $state - 1
    let $i1 := $i0 idiv 4
    return p:token((), $p:EXPECTED[$i0 mod 4 + $p:EXPECTED[$i1 + 1] + 1], $t * 32 + 1)
  else
    ()
};

(:~
 : Classify codepoint by doing a tail recursive binary search for a
 : matching codepoint range entry in MAP2, the codepoint to charclass
 : map for codepoints above the surrogate block.
 :
 : @param $c the codepoint.
 : @param $lo the binary search lower bound map index.
 : @param $hi the binary search upper bound map index.
 : @return the character class.
 :)
declare function p:map2($c as xs:integer, $lo as xs:integer, $hi as xs:integer) as xs:integer
{
  if ($lo > $hi) then
    0
  else
    let $m := ($hi + $lo) idiv 2
    return
      if ($p:MAP2[$m] > $c) then
        p:map2($c, $lo, $m - 1)
      else if ($p:MAP2[2 + $m] < $c) then
        p:map2($c, $m + 1, $hi)
      else
        $p:MAP2[4 + $m]
};

(:~
 : Parse EquivalenceCharRange.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-EquivalenceCharRange($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 5) then                        (: StringLiteral :)
      let $state := p:consume(5, $input, $state)            (: StringLiteral :)
      return $state
    else
      let $state := p:consume(38, $input, $state)           (: '[' :)
      let $state := p:lookahead1(19, $input, $state)        (: CharCode | Char | CharRange | CharCodeRange :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:l1] = 7) then                    (: Char :)
          let $state := p:consume(7, $input, $state)        (: Char :)
          return $state
        else if ($state[$p:l1] = 6) then                    (: CharCode :)
          let $state := p:consume(6, $input, $state)        (: CharCode :)
          return $state
        else if ($state[$p:l1] = 8) then                    (: CharRange :)
          let $state := p:consume(8, $input, $state)        (: CharRange :)
          return $state
        else
          let $state := p:consume(9, $input, $state)        (: CharCodeRange :)
          return $state
      let $state := p:lookahead1(3, $input, $state)         (: ']' :)
      let $state := p:consume(41, $input, $state)           (: ']' :)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "EquivalenceCharRange", $count, $begin, $end)
};

(:~
 : Parse Equivalence.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-Equivalence($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:consume(17, $input, $state)               (: EquivalenceLookAhead :)
  let $state := p:lookahead1W(11, $input, $state)           (: Whitespace | StringLiteral | '[' :)
  let $state := p:whitespace($input, $state)
  let $state :=
    if ($state[$p:error]) then
      $state
    else
      p:parse-EquivalenceCharRange($input, $state)
  let $state := p:lookahead1W(6, $input, $state)            (: Whitespace | '==' :)
  let $state := p:consume(34, $input, $state)               (: '==' :)
  let $state := p:lookahead1W(11, $input, $state)           (: Whitespace | StringLiteral | '[' :)
  let $state := p:whitespace($input, $state)
  let $state :=
    if ($state[$p:error]) then
      $state
    else
      p:parse-EquivalenceCharRange($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "Equivalence", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production Delimiter (one or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-Delimiter-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(10, $input, $state)         (: Whitespace | NCName | StringLiteral :)
    let $state := p:whitespace($input, $state)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-NameOrString($input, $state)
    let $state := p:lookahead1W(22, $input, $state)         (: Whitespace | NCName | StringLiteral | DocComment | EOF |
                                                               EquivalenceLookAhead | '<?ENCORE?>' :)
    let $state :=
      if ($state[$p:l1] eq 3) then                          (: NCName :)
        let $state := p:lookahead2W(33, $input, $state)     (: Whitespace | NCName | Context | StringLiteral |
                                                               DocComment | EOF | EquivalenceLookAhead | '::=' | '<<' |
                                                               '<?ENCORE?>' | '>>' | '?' | '\\' :)
        let $state :=
          if ($state[$p:lk] eq 259) then                    (: NCName Context :)
            let $state := p:lookahead3W(24, $input, $state) (: Whitespace | NCName | StringLiteral | DocComment | EOF |
                                                               EquivalenceLookAhead | '<<' | '<?ENCORE?>' | '>>' :)
            return $state
          else
            $state
        return $state
      else if ($state[$p:l1] eq 5) then                     (: StringLiteral :)
        let $state := p:lookahead2W(25, $input, $state)     (: Whitespace | NCName | Context | StringLiteral |
                                                               DocComment | EOF | EquivalenceLookAhead | '<<' |
                                                               '<?ENCORE?>' | '>>' :)
        let $state :=
          if ($state[$p:lk] eq 261) then                    (: StringLiteral Context :)
            let $state := p:lookahead3W(24, $input, $state) (: Whitespace | NCName | StringLiteral | DocComment | EOF |
                                                               EquivalenceLookAhead | '<<' | '<?ENCORE?>' | '>>' :)
            return $state
          else
            $state
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    return
      if ($state[$p:lk] = 15                                (: DocComment :)
       or $state[$p:lk] = 16                                (: EOF :)
       or $state[$p:lk] = 17                                (: EquivalenceLookAhead :)
       or $state[$p:lk] = 32                                (: '<?ENCORE?>' :)
       or $state[$p:lk] = 1859                              (: NCName '::=' :)
       or $state[$p:lk] = 1923                              (: NCName '<<' :)
       or $state[$p:lk] = 1925                              (: StringLiteral '<<' :)
       or $state[$p:lk] = 2243                              (: NCName '>>' :)
       or $state[$p:lk] = 2245                              (: StringLiteral '>>' :)
       or $state[$p:lk] = 2307                              (: NCName '?' :)
       or $state[$p:lk] = 2563                              (: NCName '\\' :)
       or $state[$p:lk] = 123139                            (: NCName Context '<<' :)
       or $state[$p:lk] = 123141                            (: StringLiteral Context '<<' :)
       or $state[$p:lk] = 143619                            (: NCName Context '>>' :)
       or $state[$p:lk] = 143621) then                      (: StringLiteral Context '>>' :)
        $state
      else
        p:parse-Delimiter-1($input, $state)
};

(:~
 : Parse Delimiter.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-Delimiter($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:consume(3, $input, $state)                (: NCName :)
  let $state := p:lookahead1W(7, $input, $state)            (: Whitespace | '\\' :)
  let $state := p:consume(40, $input, $state)               (: '\\' :)
  let $state := p:parse-Delimiter-1($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "Delimiter", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production Preference (one or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-Preference-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(10, $input, $state)         (: Whitespace | NCName | StringLiteral :)
    let $state := p:whitespace($input, $state)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-NameOrString($input, $state)
    let $state := p:lookahead1W(22, $input, $state)         (: Whitespace | NCName | StringLiteral | DocComment | EOF |
                                                               EquivalenceLookAhead | '<?ENCORE?>' :)
    let $state :=
      if ($state[$p:l1] eq 3) then                          (: NCName :)
        let $state := p:lookahead2W(33, $input, $state)     (: Whitespace | NCName | Context | StringLiteral |
                                                               DocComment | EOF | EquivalenceLookAhead | '::=' | '<<' |
                                                               '<?ENCORE?>' | '>>' | '?' | '\\' :)
        let $state :=
          if ($state[$p:lk] eq 259) then                    (: NCName Context :)
            let $state := p:lookahead3W(24, $input, $state) (: Whitespace | NCName | StringLiteral | DocComment | EOF |
                                                               EquivalenceLookAhead | '<<' | '<?ENCORE?>' | '>>' :)
            return $state
          else
            $state
        return $state
      else if ($state[$p:l1] eq 5) then                     (: StringLiteral :)
        let $state := p:lookahead2W(25, $input, $state)     (: Whitespace | NCName | Context | StringLiteral |
                                                               DocComment | EOF | EquivalenceLookAhead | '<<' |
                                                               '<?ENCORE?>' | '>>' :)
        let $state :=
          if ($state[$p:lk] eq 261) then                    (: StringLiteral Context :)
            let $state := p:lookahead3W(24, $input, $state) (: Whitespace | NCName | StringLiteral | DocComment | EOF |
                                                               EquivalenceLookAhead | '<<' | '<?ENCORE?>' | '>>' :)
            return $state
          else
            $state
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    return
      if ($state[$p:lk] = 15                                (: DocComment :)
       or $state[$p:lk] = 16                                (: EOF :)
       or $state[$p:lk] = 17                                (: EquivalenceLookAhead :)
       or $state[$p:lk] = 32                                (: '<?ENCORE?>' :)
       or $state[$p:lk] = 1859                              (: NCName '::=' :)
       or $state[$p:lk] = 1923                              (: NCName '<<' :)
       or $state[$p:lk] = 1925                              (: StringLiteral '<<' :)
       or $state[$p:lk] = 2243                              (: NCName '>>' :)
       or $state[$p:lk] = 2245                              (: StringLiteral '>>' :)
       or $state[$p:lk] = 2307                              (: NCName '?' :)
       or $state[$p:lk] = 2563                              (: NCName '\\' :)
       or $state[$p:lk] = 123139                            (: NCName Context '<<' :)
       or $state[$p:lk] = 123141                            (: StringLiteral Context '<<' :)
       or $state[$p:lk] = 143619                            (: NCName Context '>>' :)
       or $state[$p:lk] = 143621) then                      (: StringLiteral Context '>>' :)
        $state
      else
        p:parse-Preference-1($input, $state)
};

(:~
 : Parse Preference.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-Preference($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else
      p:parse-NameOrString($input, $state)
  let $state := p:lookahead1W(16, $input, $state)           (: Whitespace | '<<' | '>>' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 35) then                       (: '>>' :)
      let $state := p:consume(35, $input, $state)           (: '>>' :)
      return $state
    else
      let $state := p:consume(30, $input, $state)           (: '<<' :)
      return $state
  let $state := p:parse-Preference-1($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "Preference", $count, $begin, $end)
};

(:~
 : Parse Option.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-Option($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 12) then                       (: WsExplicit :)
      let $state := p:consume(12, $input, $state)           (: WsExplicit :)
      return $state
    else
      let $state := p:consume(13, $input, $state)           (: WsDefinition :)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "Option", $count, $begin, $end)
};

(:~
 : Parse Link.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-Link($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:consume(10, $input, $state)               (: UrlIntroducer :)
  let $state := p:lookahead1(1, $input, $state)             (: URL :)
  let $state := p:consume(11, $input, $state)               (: URL :)
  let $state := p:lookahead1(3, $input, $state)             (: ']' :)
  let $state := p:consume(41, $input, $state)               (: ']' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "Link", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production Choice (one or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-Choice-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:consume(42, $input, $state)             (: '|' :)
    let $state := p:lookahead1W(31, $input, $state)         (: Whitespace | NCName | StringLiteral | CharCode | '$' |
                                                               '(' | ')' | '.' | '<?' | '[' | '[^' | '|' :)
    let $state := p:whitespace($input, $state)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-CompositeExpression($input, $state)
    let $state := p:lookahead1W(14, $input, $state)         (: Whitespace | ')' | '|' :)
    return
      if ($state[$p:l1] != 42) then                         (: '|' :)
        $state
      else
        p:parse-Choice-1($input, $state)
};

(:~
 : Parse the 2nd loop of production Choice (one or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-Choice-2($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:consume(28, $input, $state)             (: '/' :)
    let $state := p:lookahead1W(30, $input, $state)         (: Whitespace | NCName | StringLiteral | CharCode | '$' |
                                                               '(' | ')' | '.' | '/' | '<?' | '[' | '[^' :)
    let $state := p:whitespace($input, $state)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-CompositeExpression($input, $state)
    let $state := p:lookahead1W(13, $input, $state)         (: Whitespace | ')' | '/' :)
    return
      if ($state[$p:l1] != 28) then                         (: '/' :)
        $state
      else
        p:parse-Choice-2($input, $state)
};

(:~
 : Parse Choice.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-Choice($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else
      p:parse-CompositeExpression($input, $state)
  let $state := p:lookahead1W(18, $input, $state)           (: Whitespace | ')' | '/' | '|' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] != 21) then                      (: ')' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:l1] = 42) then                   (: '|' :)
          let $state := p:parse-Choice-1($input, $state)
          return $state
        else
          let $state := p:parse-Choice-2($input, $state)
          return $state
      return $state
    else
      $state
  let $end := $state[$p:e0]
  return p:reduce($state, "Choice", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production CharClass (one or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-CharClass-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1(19, $input, $state)          (: CharCode | Char | CharRange | CharCodeRange :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 7) then                      (: Char :)
        let $state := p:consume(7, $input, $state)          (: Char :)
        return $state
      else if ($state[$p:l1] = 6) then                      (: CharCode :)
        let $state := p:consume(6, $input, $state)          (: CharCode :)
        return $state
      else if ($state[$p:l1] = 8) then                      (: CharRange :)
        let $state := p:consume(8, $input, $state)          (: CharRange :)
        return $state
      else
        let $state := p:consume(9, $input, $state)          (: CharCodeRange :)
        return $state
    let $state := p:lookahead1(20, $input, $state)          (: CharCode | Char | CharRange | CharCodeRange | ']' :)
    return
      if ($state[$p:l1] = 41) then                          (: ']' :)
        $state
      else
        p:parse-CharClass-1($input, $state)
};

(:~
 : Parse CharClass.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-CharClass($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 38) then                       (: '[' :)
      let $state := p:consume(38, $input, $state)           (: '[' :)
      return $state
    else
      let $state := p:consume(39, $input, $state)           (: '[^' :)
      return $state
  let $state := p:parse-CharClass-1($input, $state)
  let $state := p:consume(41, $input, $state)               (: ']' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "CharClass", $count, $begin, $end)
};

(:~
 : Parse NameOrString.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-NameOrString($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 3) then                        (: NCName :)
      let $state := p:consume(3, $input, $state)            (: NCName :)
      let $state := p:lookahead1W(48, $input, $state)       (: Whitespace | NCName | Context | StringLiteral |
                                                               CharCode | WsExplicit | WsDefinition | DocComment | EOF |
                                                               EquivalenceLookAhead | '$' | '&' | '(' | ')' | '*' |
                                                               '**' | '+' | '++' | '-' | '.' | '/' | '<<' | '<?' |
                                                               '<?ENCORE?>' | '<?TOKENS?>' | '>>' | '?' | '[' | '[^' |
                                                               '|' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:l1] = 4) then                    (: Context :)
          let $state := p:consume(4, $input, $state)        (: Context :)
          return $state
        else
          $state
      return $state
    else
      let $state := p:consume(5, $input, $state)            (: StringLiteral :)
      let $state := p:lookahead1W(48, $input, $state)       (: Whitespace | NCName | Context | StringLiteral |
                                                               CharCode | WsExplicit | WsDefinition | DocComment | EOF |
                                                               EquivalenceLookAhead | '$' | '&' | '(' | ')' | '*' |
                                                               '**' | '+' | '++' | '-' | '.' | '/' | '<<' | '<?' |
                                                               '<?ENCORE?>' | '<?TOKENS?>' | '>>' | '?' | '[' | '[^' |
                                                               '|' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:l1] = 4) then                    (: Context :)
          let $state := p:consume(4, $input, $state)        (: Context :)
          return $state
        else
          $state
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "NameOrString", $count, $begin, $end)
};

(:~
 : Parse Primary.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-Primary($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 3                              (: NCName :)
          or $state[$p:l1] = 5) then                        (: StringLiteral :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-NameOrString($input, $state)
      return $state
    else if ($state[$p:l1] = 31) then                       (: '<?' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-ProcessingInstruction($input, $state)
      return $state
    else if ($state[$p:l1] = 6) then                        (: CharCode :)
      let $state := p:consume(6, $input, $state)            (: CharCode :)
      return $state
    else if ($state[$p:l1] = 18) then                       (: '$' :)
      let $state := p:consume(18, $input, $state)           (: '$' :)
      return $state
    else if ($state[$p:l1] = 27) then                       (: '.' :)
      let $state := p:consume(27, $input, $state)           (: '.' :)
      return $state
    else if ($state[$p:l1] = 20) then                       (: '(' :)
      let $state := p:consume(20, $input, $state)           (: '(' :)
      let $state := p:lookahead1W(34, $input, $state)       (: Whitespace | NCName | StringLiteral | CharCode | '$' |
                                                               '(' | ')' | '.' | '/' | '<?' | '[' | '[^' | '|' :)
      let $state := p:whitespace($input, $state)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-Choice($input, $state)
      let $state := p:consume(21, $input, $state)           (: ')' :)
      return $state
    else
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-CharClass($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "Primary", $count, $begin, $end)
};

(:~
 : Parse Item.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-Item($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else
      p:parse-Primary($input, $state)
  let $state := p:lookahead1W(45, $input, $state)           (: Whitespace | NCName | StringLiteral | CharCode |
                                                               WsExplicit | WsDefinition | DocComment | EOF |
                                                               EquivalenceLookAhead | '$' | '&' | '(' | ')' | '*' |
                                                               '**' | '+' | '++' | '-' | '.' | '/' | '<?' |
                                                               '<?ENCORE?>' | '<?TOKENS?>' | '?' | '[' | '[^' | '|' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 22                             (: '*' :)
          or $state[$p:l1] = 24                             (: '+' :)
          or $state[$p:l1] = 36) then                       (: '?' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:l1] = 36) then                   (: '?' :)
          let $state := p:consume(36, $input, $state)       (: '?' :)
          return $state
        else if ($state[$p:l1] = 22) then                   (: '*' :)
          let $state := p:consume(22, $input, $state)       (: '*' :)
          return $state
        else
          let $state := p:consume(24, $input, $state)       (: '+' :)
          return $state
      return $state
    else
      $state
  let $end := $state[$p:e0]
  return p:reduce($state, "Item", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production CompositeExpression (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-CompositeExpression-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(39, $input, $state)         (: Whitespace | NCName | StringLiteral | CharCode |
                                                               WsExplicit | WsDefinition | DocComment | EOF |
                                                               EquivalenceLookAhead | '$' | '&' | '(' | ')' | '.' |
                                                               '/' | '<?' | '<?ENCORE?>' | '<?TOKENS?>' | '[' | '[^' |
                                                               '|' :)
    let $state :=
      if ($state[$p:l1] eq 3) then                          (: NCName :)
        let $state := p:lookahead2W(46, $input, $state)     (: Whitespace | NCName | Context | StringLiteral |
                                                               CharCode | WsExplicit | WsDefinition | DocComment | EOF |
                                                               EquivalenceLookAhead | '$' | '&' | '(' | ')' | '*' |
                                                               '+' | '.' | '/' | '::=' | '<<' | '<?' | '<?ENCORE?>' |
                                                               '<?TOKENS?>' | '>>' | '?' | '[' | '[^' | '\\' | '|' :)
        let $state :=
          if ($state[$p:lk] eq 259) then                    (: NCName Context :)
            let $state := p:lookahead3W(43, $input, $state) (: Whitespace | NCName | StringLiteral | CharCode |
                                                               WsExplicit | WsDefinition | DocComment | EOF |
                                                               EquivalenceLookAhead | '$' | '&' | '(' | ')' | '*' |
                                                               '+' | '.' | '/' | '<<' | '<?' | '<?ENCORE?>' |
                                                               '<?TOKENS?>' | '>>' | '?' | '[' | '[^' | '|' :)
            return $state
          else if ($state[$p:lk] eq 2307) then              (: NCName '?' :)
            let $state := p:lookahead3W(40, $input, $state) (: Whitespace | NCName | StringLiteral | CharCode |
                                                               WsExplicit | WsDefinition | DocComment | EOF |
                                                               EquivalenceLookAhead | '$' | '&' | '(' | ')' | '.' |
                                                               '/' | '::=' | '<?' | '<?ENCORE?>' | '<?TOKENS?>' | '[' |
                                                               '[^' | '|' :)
            return $state
          else
            $state
        return $state
      else if ($state[$p:l1] eq 5) then                     (: StringLiteral :)
        let $state := p:lookahead2W(44, $input, $state)     (: Whitespace | NCName | Context | StringLiteral |
                                                               CharCode | WsExplicit | WsDefinition | DocComment | EOF |
                                                               EquivalenceLookAhead | '$' | '&' | '(' | ')' | '*' |
                                                               '+' | '.' | '/' | '<<' | '<?' | '<?ENCORE?>' |
                                                               '<?TOKENS?>' | '>>' | '?' | '[' | '[^' | '|' :)
        let $state :=
          if ($state[$p:lk] eq 261) then                    (: StringLiteral Context :)
            let $state := p:lookahead3W(43, $input, $state) (: Whitespace | NCName | StringLiteral | CharCode |
                                                               WsExplicit | WsDefinition | DocComment | EOF |
                                                               EquivalenceLookAhead | '$' | '&' | '(' | ')' | '*' |
                                                               '+' | '.' | '/' | '<<' | '<?' | '<?ENCORE?>' |
                                                               '<?TOKENS?>' | '>>' | '?' | '[' | '[^' | '|' :)
            return $state
          else
            $state
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    return
      if ($state[$p:lk] = 12                                (: WsExplicit :)
       or $state[$p:lk] = 13                                (: WsDefinition :)
       or $state[$p:lk] = 15                                (: DocComment :)
       or $state[$p:lk] = 16                                (: EOF :)
       or $state[$p:lk] = 17                                (: EquivalenceLookAhead :)
       or $state[$p:lk] = 19                                (: '&' :)
       or $state[$p:lk] = 21                                (: ')' :)
       or $state[$p:lk] = 28                                (: '/' :)
       or $state[$p:lk] = 32                                (: '<?ENCORE?>' :)
       or $state[$p:lk] = 33                                (: '<?TOKENS?>' :)
       or $state[$p:lk] = 42                                (: '|' :)
       or $state[$p:lk] = 1859                              (: NCName '::=' :)
       or $state[$p:lk] = 1923                              (: NCName '<<' :)
       or $state[$p:lk] = 1925                              (: StringLiteral '<<' :)
       or $state[$p:lk] = 2243                              (: NCName '>>' :)
       or $state[$p:lk] = 2245                              (: StringLiteral '>>' :)
       or $state[$p:lk] = 2563                              (: NCName '\\' :)
       or $state[$p:lk] = 121091                            (: NCName '?' '::=' :)
       or $state[$p:lk] = 123139                            (: NCName Context '<<' :)
       or $state[$p:lk] = 123141                            (: StringLiteral Context '<<' :)
       or $state[$p:lk] = 143619                            (: NCName Context '>>' :)
       or $state[$p:lk] = 143621) then                      (: StringLiteral Context '>>' :)
        $state
      else
        let $state := p:whitespace($input, $state)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-Item($input, $state)
        return p:parse-CompositeExpression-1($input, $state)
};

(:~
 : Parse CompositeExpression.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-CompositeExpression($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] eq 3) then                            (: NCName :)
      let $state := p:lookahead2W(49, $input, $state)       (: Whitespace | NCName | Context | StringLiteral |
                                                               CharCode | WsExplicit | WsDefinition | DocComment | EOF |
                                                               EquivalenceLookAhead | '$' | '&' | '(' | ')' | '*' |
                                                               '**' | '+' | '++' | '-' | '.' | '/' | '::=' | '<<' |
                                                               '<?' | '<?ENCORE?>' | '<?TOKENS?>' | '>>' | '?' | '[' |
                                                               '[^' | '\\' | '|' :)
      let $state :=
        if ($state[$p:lk] eq 259) then                      (: NCName Context :)
          let $state := p:lookahead3W(47, $input, $state)   (: Whitespace | NCName | StringLiteral | CharCode |
                                                               WsExplicit | WsDefinition | DocComment | EOF |
                                                               EquivalenceLookAhead | '$' | '&' | '(' | ')' | '*' |
                                                               '**' | '+' | '++' | '-' | '.' | '/' | '<<' | '<?' |
                                                               '<?ENCORE?>' | '<?TOKENS?>' | '>>' | '?' | '[' | '[^' |
                                                               '|' :)
          return $state
        else if ($state[$p:lk] eq 2307) then                (: NCName '?' :)
          let $state := p:lookahead3W(42, $input, $state)   (: Whitespace | NCName | StringLiteral | CharCode |
                                                               WsExplicit | WsDefinition | DocComment | EOF |
                                                               EquivalenceLookAhead | '$' | '&' | '(' | ')' | '**' |
                                                               '++' | '-' | '.' | '/' | '::=' | '<?' | '<?ENCORE?>' |
                                                               '<?TOKENS?>' | '[' | '[^' | '|' :)
          return $state
        else
          $state
      return $state
    else if ($state[$p:l1] eq 5) then                       (: StringLiteral :)
      let $state := p:lookahead2W(48, $input, $state)       (: Whitespace | NCName | Context | StringLiteral |
                                                               CharCode | WsExplicit | WsDefinition | DocComment | EOF |
                                                               EquivalenceLookAhead | '$' | '&' | '(' | ')' | '*' |
                                                               '**' | '+' | '++' | '-' | '.' | '/' | '<<' | '<?' |
                                                               '<?ENCORE?>' | '<?TOKENS?>' | '>>' | '?' | '[' | '[^' |
                                                               '|' :)
      let $state :=
        if ($state[$p:lk] eq 261) then                      (: StringLiteral Context :)
          let $state := p:lookahead3W(47, $input, $state)   (: Whitespace | NCName | StringLiteral | CharCode |
                                                               WsExplicit | WsDefinition | DocComment | EOF |
                                                               EquivalenceLookAhead | '$' | '&' | '(' | ')' | '*' |
                                                               '**' | '+' | '++' | '-' | '.' | '/' | '<<' | '<?' |
                                                               '<?ENCORE?>' | '<?TOKENS?>' | '>>' | '?' | '[' | '[^' |
                                                               '|' :)
          return $state
        else
          $state
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:lk] != 12                            (: WsExplicit :)
         and $state[$p:lk] != 13                            (: WsDefinition :)
         and $state[$p:lk] != 15                            (: DocComment :)
         and $state[$p:lk] != 16                            (: EOF :)
         and $state[$p:lk] != 17                            (: EquivalenceLookAhead :)
         and $state[$p:lk] != 19                            (: '&' :)
         and $state[$p:lk] != 21                            (: ')' :)
         and $state[$p:lk] != 28                            (: '/' :)
         and $state[$p:lk] != 32                            (: '<?ENCORE?>' :)
         and $state[$p:lk] != 33                            (: '<?TOKENS?>' :)
         and $state[$p:lk] != 42                            (: '|' :)
         and $state[$p:lk] != 1859                          (: NCName '::=' :)
         and $state[$p:lk] != 1923                          (: NCName '<<' :)
         and $state[$p:lk] != 1925                          (: StringLiteral '<<' :)
         and $state[$p:lk] != 2243                          (: NCName '>>' :)
         and $state[$p:lk] != 2245                          (: StringLiteral '>>' :)
         and $state[$p:lk] != 2563                          (: NCName '\\' :)
         and $state[$p:lk] != 121091                        (: NCName '?' '::=' :)
         and $state[$p:lk] != 123139                        (: NCName Context '<<' :)
         and $state[$p:lk] != 123141                        (: StringLiteral Context '<<' :)
         and $state[$p:lk] != 143619                        (: NCName Context '>>' :)
         and $state[$p:lk] != 143621) then                  (: StringLiteral Context '>>' :)
      let $state := p:whitespace($input, $state)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-Item($input, $state)
      let $state := p:lookahead1W(41, $input, $state)       (: Whitespace | NCName | StringLiteral | CharCode |
                                                               WsExplicit | WsDefinition | DocComment | EOF |
                                                               EquivalenceLookAhead | '$' | '&' | '(' | ')' | '**' |
                                                               '++' | '-' | '.' | '/' | '<?' | '<?ENCORE?>' |
                                                               '<?TOKENS?>' | '[' | '[^' | '|' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:l1] = 26) then                   (: '-' :)
          let $state := p:consume(26, $input, $state)       (: '-' :)
          let $state := p:lookahead1W(26, $input, $state)   (: Whitespace | NCName | StringLiteral | CharCode | '$' |
                                                               '(' | '.' | '<?' | '[' | '[^' :)
          let $state := p:whitespace($input, $state)
          let $state :=
            if ($state[$p:error]) then
              $state
            else
              p:parse-Item($input, $state)
          return $state
        else if ($state[$p:l1] = 23) then                   (: '**' :)
          let $state := p:consume(23, $input, $state)       (: '**' :)
          let $state := p:lookahead1W(26, $input, $state)   (: Whitespace | NCName | StringLiteral | CharCode | '$' |
                                                               '(' | '.' | '<?' | '[' | '[^' :)
          let $state := p:whitespace($input, $state)
          let $state :=
            if ($state[$p:error]) then
              $state
            else
              p:parse-Item($input, $state)
          return $state
        else if ($state[$p:l1] = 25) then                   (: '++' :)
          let $state := p:consume(25, $input, $state)       (: '++' :)
          let $state := p:lookahead1W(26, $input, $state)   (: Whitespace | NCName | StringLiteral | CharCode | '$' |
                                                               '(' | '.' | '<?' | '[' | '[^' :)
          let $state := p:whitespace($input, $state)
          let $state :=
            if ($state[$p:error]) then
              $state
            else
              p:parse-Item($input, $state)
          return $state
        else
          let $state := p:parse-CompositeExpression-1($input, $state)
          return $state
      return $state
    else
      $state
  let $end := $state[$p:e0]
  return p:reduce($state, "CompositeExpression", $count, $begin, $end)
};

(:~
 : Parse Alternative.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-Alternative($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else
      p:parse-CompositeExpression($input, $state)
  let $state := p:lookahead1W(35, $input, $state)           (: Whitespace | NCName | StringLiteral | WsExplicit |
                                                               WsDefinition | DocComment | EOF | EquivalenceLookAhead |
                                                               '&' | '/' | '<?ENCORE?>' | '<?TOKENS?>' | '|' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 19) then                       (: '&' :)
      let $state := p:consume(19, $input, $state)           (: '&' :)
      let $state := p:lookahead1W(26, $input, $state)       (: Whitespace | NCName | StringLiteral | CharCode | '$' |
                                                               '(' | '.' | '<?' | '[' | '[^' :)
      let $state := p:whitespace($input, $state)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-Item($input, $state)
      return $state
    else
      $state
  let $end := $state[$p:e0]
  return p:reduce($state, "Alternative", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production Alternatives (one or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-Alternatives-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:consume(42, $input, $state)             (: '|' :)
    let $state := p:lookahead1W(37, $input, $state)         (: Whitespace | NCName | StringLiteral | CharCode |
                                                               WsExplicit | WsDefinition | DocComment | EOF |
                                                               EquivalenceLookAhead | '$' | '&' | '(' | '.' | '<?' |
                                                               '<?ENCORE?>' | '<?TOKENS?>' | '[' | '[^' | '|' :)
    let $state := p:whitespace($input, $state)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-Alternative($input, $state)
    let $state := p:lookahead1W(29, $input, $state)         (: Whitespace | NCName | StringLiteral | WsExplicit |
                                                               WsDefinition | DocComment | EOF | EquivalenceLookAhead |
                                                               '<?ENCORE?>' | '<?TOKENS?>' | '|' :)
    return
      if ($state[$p:l1] != 42) then                         (: '|' :)
        $state
      else
        p:parse-Alternatives-1($input, $state)
};

(:~
 : Parse the 2nd loop of production Alternatives (one or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-Alternatives-2($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:consume(28, $input, $state)             (: '/' :)
    let $state := p:lookahead1W(36, $input, $state)         (: Whitespace | NCName | StringLiteral | CharCode |
                                                               WsExplicit | WsDefinition | DocComment | EOF |
                                                               EquivalenceLookAhead | '$' | '&' | '(' | '.' | '/' |
                                                               '<?' | '<?ENCORE?>' | '<?TOKENS?>' | '[' | '[^' :)
    let $state := p:whitespace($input, $state)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-Alternative($input, $state)
    let $state := p:lookahead1W(28, $input, $state)         (: Whitespace | NCName | StringLiteral | WsExplicit |
                                                               WsDefinition | DocComment | EOF | EquivalenceLookAhead |
                                                               '/' | '<?ENCORE?>' | '<?TOKENS?>' :)
    return
      if ($state[$p:l1] != 28) then                         (: '/' :)
        $state
      else
        p:parse-Alternatives-2($input, $state)
};

(:~
 : Parse Alternatives.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-Alternatives($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else
      p:parse-Alternative($input, $state)
  let $state := p:lookahead1W(32, $input, $state)           (: Whitespace | NCName | StringLiteral | WsExplicit |
                                                               WsDefinition | DocComment | EOF | EquivalenceLookAhead |
                                                               '/' | '<?ENCORE?>' | '<?TOKENS?>' | '|' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 28                             (: '/' :)
          or $state[$p:l1] = 42) then                       (: '|' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:l1] = 42) then                   (: '|' :)
          let $state := p:parse-Alternatives-1($input, $state)
          return $state
        else
          let $state := p:parse-Alternatives-2($input, $state)
          return $state
      return $state
    else
      $state
  let $end := $state[$p:e0]
  return p:reduce($state, "Alternatives", $count, $begin, $end)
};

(:~
 : Parse Production.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-Production($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 15) then                       (: DocComment :)
      let $state := p:consume(15, $input, $state)           (: DocComment :)
      return $state
    else
      $state
  let $state := p:lookahead1W(4, $input, $state)            (: Whitespace | NCName :)
  let $state := p:consume(3, $input, $state)                (: NCName :)
  let $state := p:lookahead1W(15, $input, $state)           (: Whitespace | '::=' | '?' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 36) then                       (: '?' :)
      let $state := p:consume(36, $input, $state)           (: '?' :)
      return $state
    else
      $state
  let $state := p:lookahead1W(5, $input, $state)            (: Whitespace | '::=' :)
  let $state := p:consume(29, $input, $state)               (: '::=' :)
  let $state := p:lookahead1W(38, $input, $state)           (: Whitespace | NCName | StringLiteral | CharCode |
                                                               UrlIntroducer | WsExplicit | WsDefinition | DocComment |
                                                               EOF | EquivalenceLookAhead | '$' | '&' | '(' | '.' |
                                                               '/' | '<?' | '<?ENCORE?>' | '<?TOKENS?>' | '[' | '[^' |
                                                               '|' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 10) then                       (: UrlIntroducer :)
      let $state := p:whitespace($input, $state)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-Link($input, $state)
      return $state
    else
      let $state := p:whitespace($input, $state)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-Alternatives($input, $state)
      return $state
  let $state := p:lookahead1W(27, $input, $state)           (: Whitespace | NCName | StringLiteral | WsExplicit |
                                                               WsDefinition | DocComment | EOF | EquivalenceLookAhead |
                                                               '<?ENCORE?>' | '<?TOKENS?>' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 12                             (: WsExplicit :)
          or $state[$p:l1] = 13) then                       (: WsDefinition :)
      let $state := p:whitespace($input, $state)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-Option($input, $state)
      return $state
    else
      $state
  let $end := $state[$p:e0]
  return p:reduce($state, "Production", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production ProcessingInstruction (one or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-ProcessingInstruction-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:consume(14, $input, $state)             (: S :)
    let $state := p:lookahead1(8, $input, $state)           (: ProcessingInstructionContents | S :)
    return
      if ($state[$p:l1] != 14) then                         (: S :)
        $state
      else
        p:parse-ProcessingInstruction-1($input, $state)
};

(:~
 : Parse ProcessingInstruction.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-ProcessingInstruction($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:consume(31, $input, $state)               (: '<?' :)
  let $state := p:lookahead1(0, $input, $state)             (: NCName :)
  let $state := p:consume(3, $input, $state)                (: NCName :)
  let $state := p:lookahead1(9, $input, $state)             (: S | '?>' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 14) then                       (: S :)
      let $state := p:parse-ProcessingInstruction-1($input, $state)
      let $state := p:consume(2, $input, $state)            (: ProcessingInstructionContents :)
      return $state
    else
      $state
  let $state := p:lookahead1(2, $input, $state)             (: '?>' :)
  let $state := p:consume(37, $input, $state)               (: '?>' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "ProcessingInstruction", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production Grammar (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-Grammar-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(17, $input, $state)         (: Whitespace | NCName | DocComment | '<?' :)
    return
      if ($state[$p:l1] != 31) then                         (: '<?' :)
        $state
      else
        let $state := p:whitespace($input, $state)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-ProcessingInstruction($input, $state)
        return p:parse-Grammar-1($input, $state)
};

(:~
 : Parse the 2nd loop of production Grammar (one or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-Grammar-2($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:whitespace($input, $state)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-Production($input, $state)
    let $state := p:lookahead1W(21, $input, $state)         (: Whitespace | NCName | DocComment | EOF | '<?ENCORE?>' |
                                                               '<?TOKENS?>' :)
    return
      if ($state[$p:l1] != 3                                (: NCName :)
      and $state[$p:l1] != 15) then                         (: DocComment :)
        $state
      else
        p:parse-Grammar-2($input, $state)
};

(:~
 : Parse the 3rd loop of production Grammar (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-Grammar-3($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(22, $input, $state)         (: Whitespace | NCName | StringLiteral | DocComment | EOF |
                                                               EquivalenceLookAhead | '<?ENCORE?>' :)
    return
      if ($state[$p:l1] = 16                                (: EOF :)
       or $state[$p:l1] = 32) then                          (: '<?ENCORE?>' :)
        $state
      else
        let $state :=
          if ($state[$p:l1] eq 3) then                      (: NCName :)
            let $state := p:lookahead2W(23, $input, $state) (: Whitespace | Context | '::=' | '<<' | '>>' | '?' | '\\' :)
            return $state
          else
            ($state[$p:l1], subsequence($state, $p:lk + 1))
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:lk] = 15                       (: DocComment :)
                or $state[$p:lk] = 1859                     (: NCName '::=' :)
                or $state[$p:lk] = 2307) then               (: NCName '?' :)
            let $state := p:whitespace($input, $state)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:parse-Production($input, $state)
            return $state
          else if ($state[$p:lk] = 2563) then               (: NCName '\\' :)
            let $state := p:whitespace($input, $state)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:parse-Delimiter($input, $state)
            return $state
          else if ($state[$p:lk] = 17) then                 (: EquivalenceLookAhead :)
            let $state := p:whitespace($input, $state)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:parse-Equivalence($input, $state)
            return $state
          else
            let $state := p:whitespace($input, $state)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:parse-Preference($input, $state)
            return $state
        return p:parse-Grammar-3($input, $state)
};

(:~
 : Parse the 4th loop of production Grammar (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-Grammar-4($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(12, $input, $state)         (: Whitespace | EOF | '<?' :)
    return
      if ($state[$p:l1] != 31) then                         (: '<?' :)
        $state
      else
        let $state := p:whitespace($input, $state)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-ProcessingInstruction($input, $state)
        return p:parse-Grammar-4($input, $state)
};

(:~
 : Parse Grammar.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-Grammar($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-Grammar-1($input, $state)
  let $state := p:parse-Grammar-2($input, $state)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 33) then                       (: '<?TOKENS?>' :)
      let $state := p:consume(33, $input, $state)           (: '<?TOKENS?>' :)
      let $state := p:parse-Grammar-3($input, $state)
      return $state
    else
      $state
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 32) then                       (: '<?ENCORE?>' :)
      let $state := p:consume(32, $input, $state)           (: '<?ENCORE?>' :)
      let $state := p:parse-Grammar-4($input, $state)
      return $state
    else
      $state
  let $state := p:consume(16, $input, $state)               (: EOF :)
  let $end := $state[$p:e0]
  return p:reduce($state, "Grammar", $count, $begin, $end)
};

(:~
 : Create a textual error message from a parsing error.
 :
 : @param $input the input string.
 : @param $error the parsing error descriptor.
 : @return the error message.
 :)
declare function p:error-message($input as xs:string, $error as element(error)) as xs:string
{
  let $begin := xs:integer($error/@b)
  let $context := string-to-codepoints(substring($input, 1, $begin - 1))
  let $linefeeds := index-of($context, 10)
  let $line := count($linefeeds) + 1
  let $column := ($begin - $linefeeds[last()], $begin)[1]
  return
    string-join
    (
      (
        if ($error/@o) then
          ("syntax error, found ", $p:TOKEN[$error/@o + 1])
        else
          "lexical analysis failed",
        "&#10;",
        "while expecting ",
        if ($error/@x) then
          $p:TOKEN[$error/@x + 1]
        else
          let $expected := p:expected-token-set($error/@s)
          return
          (
            "["[exists($expected[2])],
            string-join($expected, ", "),
            "]"[exists($expected[2])]
          ),
        "&#10;",
        if ($error/@o or $error/@e = $begin) then
          ()
        else
          ("after successfully scanning ", string($error/@e - $begin), " characters beginning "),
        "at line ", string($line), ", column ", string($column), ":&#10;",
        "...", substring($input, $begin, 64), "..."
      ),
      ""
    )
};

(:~
 : Consume one token, i.e. compare lookahead token 1 with expected
 : token and in case of a match, shift lookahead tokens down such that
 : l1 becomes the current token, and higher lookahead tokens move down.
 : When lookahead token 1 does not match the expected token, raise an
 : error by saving the expected token code in the error field of the
 : lexer state.
 :
 : @param $code the expected token.
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:consume($code as xs:integer, $input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else if ($state[$p:l1] eq $code) then
  (
    subsequence($state, $p:l1, 9),
    0, 0, 0,
    subsequence($state, 13),
    let $begin := $state[$p:e0]
    let $end := $state[$p:b1]
    where $begin ne $end
    return
      text
      {
        substring($input, $begin, $end - $begin)
      },
    let $token := $p:TOKEN[1 + $state[$p:l1]]
    let $name := if (starts-with($token, "'")) then "TOKEN" else $token
    let $begin := $state[$p:b1]
    let $end := $state[$p:e1]
    return
      element {$name}
      {
        substring($input, $begin, $end - $begin)
      }
  )
  else
  (
    subsequence($state, 1, $p:error - 1),
    element error
    {
      attribute b {$state[$p:b1]},
      attribute e {$state[$p:e1]},
      if ($state[$p:l1] lt 0) then
        attribute s {- $state[$p:l1]}
      else
        (attribute o {$state[$p:l1]}, attribute x {$code})
    },
    subsequence($state, $p:error + 1)
  )
};

(:~
 : Consume whitespace.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:whitespace($input as xs:string,
                              $state as item()+) as item()+
{
  if ($state[$p:e0] = $state[$p:b1]) then
    $state
  else
    let $begin := $state[$p:e0]
    let $end := $state[$p:b1]
    return
    (
      0,
      $state[$p:b0],
      $end,
      subsequence($state, $p:e0 + 1),
      text
      {
        substring($input, $begin, $end - $begin)
      }
    )
};

(:~
 : Use p:match to fetch the next token, but skip any leading
 : whitespace.
 :
 : @param $input the input string.
 : @param $begin the index where to start.
 : @param $token-set the valid token set id.
 : @return a sequence of three values: the token code of the result
 : token, with input string positions of token begin and end.
 :)
declare function p:matchW($input as xs:string,
                          $begin as xs:integer,
                          $token-set as xs:integer)
{
  let $match := p:match($input, $begin, $token-set)
  return
    if ($match[1] = 1) then                                 (: Whitespace :)
      p:matchW($input, $match[3], $token-set)
    else
      $match
};

(:~
 : Lookahead one token on level 1 with whitespace skipping.
 :
 : @param $set the code of the DFA entry state for the set of valid tokens.
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:lookahead1W($set as xs:integer, $input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:l1] ne 0) then
    $state
  else
    let $match :=
      (
        p:matchW($input, $state[$p:e0], $set),
        0, 0, 0
      )
    return
    (
      $match[1],
      subsequence($state, $p:b0, 2),
      $match,
      subsequence($state, 10)
    )
};

(:~
 : Lookahead one token on level 2 with whitespace skipping.
 :
 : @param $set the code of the DFA entry state for the set of valid tokens.
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:lookahead2W($set as xs:integer, $input as xs:string, $state as item()+) as item()+
{
  let $match :=
    if ($state[$p:l2] ne 0) then
      subsequence($state, $p:l2, 6)
    else
    (
      p:matchW($input, $state[$p:e1], $set),
      0, 0, 0
    )
  return
  (
    $match[1] * 64 + $state[$p:l1],
    subsequence($state, $p:b0, 5),
    $match,
    subsequence($state, 13)
  )
};

(:~
 : Lookahead one token on level 3 with whitespace skipping.
 :
 : @param $set the code of the DFA entry state for the set of valid tokens.
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:lookahead3W($set as xs:integer, $input as xs:string, $state as item()+) as item()+
{
  let $match :=
    if ($state[$p:l3] ne 0) then
      subsequence($state, $p:l3, 3)
    else
      p:matchW($input, $state[$p:e2], $set)
  return
  (
    $match[1] * 4096 + $state[$p:lk],
    subsequence($state, $p:b0, 8),
    $match,
    subsequence($state, 13)
  )
};

(:~
 : Lookahead one token on level 1.
 :
 : @param $set the code of the DFA entry state for the set of valid tokens.
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:lookahead1($set as xs:integer, $input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:l1] ne 0) then
    $state
  else
    let $match :=
      (
        p:match($input, $state[$p:e0], $set),
        0, 0, 0
      )
    return
    (
      $match[1],
      subsequence($state, $p:b0, 2),
      $match,
      subsequence($state, 10)
    )
};

(:~
 : Reduce the result stack, creating a nonterminal element. Pop
 : $count elements off the stack, wrap them in a new element
 : named $name, and push the new element.
 :
 : @param $state lexer state, error indicator, and result stack.
 : @param $name the name of the result node.
 : @param $count the number of child nodes.
 : @param $begin the input index where the nonterminal begins.
 : @param $end the input index where the nonterminal ends.
 : @return the updated state.
 :)
declare function p:reduce($state as item()+, $name as xs:string, $count as xs:integer, $begin as xs:integer, $end as xs:integer) as item()+
{
  subsequence($state, 1, $count),
  element {$name}
  {
    subsequence($state, $count + 1)
  }
};

(:~
 : Parse start symbol Grammar from given string.
 :
 : @param $s the string to be parsed.
 : @return the result as generated by parser actions.
 :)
declare function p:parse-Grammar($s as xs:string) as item()*
{
  let $state := (0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, false())
  let $state := p:parse-Grammar($s, $state)
  let $error := $state[$p:error]
  return
    if ($error) then
      element ERROR {$error/@*, p:error-message($s, $error)}
    else
      subsequence($state, $p:result)
};

(: End :)
